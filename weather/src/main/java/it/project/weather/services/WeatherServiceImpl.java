package it.project.weather.services;

/**
 * @author @EdoardoSampaolesi
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import it.project.weather.exeptions.CityNotFoundException;
import it.project.weather.interfaces.Coord;
import it.project.weather.interfaces.WeatherService;

public class WeatherServiceImpl implements WeatherService
{
    private String apikey = null;
    private final String oneCallAPILink = "https://api.openweathermap.org/data/2.5/onecall?";
    private final String GeocodingAPILink = "http://api.openweathermap.org/geo/1.0/direct?";
    private final String HistoricalWeatherAPILink = "https://api.openweathermap.org/data/2.5/onecall/timemachine?";

    public WeatherServiceImpl(String apikey) 
    {
        this.apikey = apikey;
    }

    /** 
     * This method call the OneCallAPI from OpenWeather, it always returns a response unless there are errors in OpenWeather
     * servers.
     * <p>
     * There are few Exceptions generated, if a class get one of them it has to rethrow it because we use it to generate
     * an error to the user
     * <p>
     * <a href="https://openweathermap.org/api/one-call-api#parameter">Here</a> is the link to OpenWeather OneCall documentation 
     * 
     * @param coord this parameter is the coordinates parameter. Lat and lon are needed to compute the API
     * @param exclude this vector contains the strings of which parts of the API have to be ignored, key words are: Current ( for current weather), Minutely (return prob. of precipitations every minute for 1 hour, it's always ignored in our calls ), Hourly ( weather hour by hour), Daily ( weather day by day ), Alerts ( national weather alerts, in our routes it isn't used )
     * @return JSONObject the API return a JSONObject which contains all weather informations required for the routes
     * @throws IOException exception generated by a wrong Input/Outout
     * @throws ParseException exception generated if it isn't possible to parse the returned object into a Json
     */
    @Override
    public JSONObject oneCallAPI(Coord coord,Vector<String> exclude) throws IOException, ParseException
    {
        JSONParser parser = new JSONParser();
        String url = createOneCallAPILink(coord,exclude);
        BufferedReader reader = new BufferedReader(
            new InputStreamReader(
                new URL(url)
                    .openConnection()
                    .getInputStream()
            )
        );
        String inputLine,finalString = "";
        while ((inputLine = reader.readLine()) != null)            
            finalString += inputLine;
        return JSONObject.class.cast(parser.parse(finalString));
    }
 
    /** 
     * This method call the Geocoding API from OpenWeather, it returns the JSON of the city, or an Expcetion in case the city not exists. 
     * That API is mostly used to get lat and lon required for OneCallAPI
     * <p>
     * There are few Exceptions generated, if a class get one of them it has to rethrow it because we use it to generate
     * an error to the user
     * <p>
     * <a href="https://openweathermap.org/api/geocoding-api#direct_name_fields">Here</a> is the link to OpenWeather Geocoding documentation 
     * 
     * @param name the only input parameter is a name of city
     * @return JSONObject the API return a JSONObject which contains informations about the city ( name in different languages, latitude, longitude , country)
     * @throws CityNotFoundException if the class that call this method get this exception, it has to rethrow its. ( personalized exception )
     * @throws IOException exception generated by a wrong Input/Outout
     * @throws ParseException exception generated if it isn't possible to parse the returned object into a Json
     */
    @Override
    public JSONObject geocodingAPI(String name) throws CityNotFoundException, IOException, ParseException
    {
        JSONParser parser = new JSONParser();
        String url = createGeocodingAPILink(name);
        BufferedReader reader = new BufferedReader(
            new InputStreamReader(
                new URL(url)
                    .openConnection()
                    .getInputStream()
            )
        );
        String inputLine,finalString = "";
        while ((inputLine = reader.readLine()) != null)           
            finalString += inputLine;
        if(finalString.equals("[]"))
            throw new CityNotFoundException(name);
        JSONArray jObject = JSONArray.class.cast(parser.parse(finalString));
        return (JSONObject) jObject.get(0);
    }
 
    /** 
     * This method call the Historical API from OpenWeather, it returns the JSON of weather hour by hour. 
     * That API always returns something unless server errors occurred or in case the StartDate parameter go out of acceptable past days range.
     * <p>
     * There are few Exceptions generated, if a class get one of them it has to rethrow it because we use it to generate
     * an error to the user
     * <p>
     * <a href="https://openweathermap.org/api/one-call-api#hist_parameter">Here</a> is the link to OpenWeather HistoricalAPI documentation 
     * 
     * 
     * @param coord this parameter is the coordinates parameter, lat and lon are needed to compute the API
     * @param start that represents the datetime where the API starts to return weather informations hour by hour and it does up to the midnight of variable's day
     * @return JSONObject the return object contains informations on the weather hour by hour 
     * @throws IOException exception generated by a wrong Input/Outout
     * @throws ParseException exception generated if it isn't possible to parse the returned object into a Json
     */
    @Override
    public JSONObject historicalWeatherAPI(Coord coord, Date start)  throws IOException, ParseException
    {
        String url = createHistoricalWeatherAPILink(coord, start);
        JSONParser parser = new JSONParser();
        BufferedReader reader = new BufferedReader(
            new InputStreamReader(
                new URL(url)
                    .openConnection()
                    .getInputStream()
            )
        );
        String inputLine,finalString = "";
        while ((inputLine = reader.readLine()) != null)            
            finalString += inputLine;
        return JSONObject.class.cast(parser.parse(finalString));
    }
  
    /** 
     * Creates the link of OneCall Api
     */
    private String createOneCallAPILink(Coord coords,Vector<String> exclusions)
    {
        String link = oneCallAPILink;
        //link += coords.toString(); //lat={[(-)00.00]}&lon={[(-)00.00]}
        link += "lat=41.87&lon=-87.62";
        link += "&appid=" + apikey;
        if(exclusions.size() > 0)
        {
            link += "&exclude=";
            for(String s : exclusions)
            {
                link += s;
                if(!exclusions.elementAt(exclusions.size()-1).equals(s))
                    link += ",";
            }
        }
        link += "&units=imperial";
        return link;
    }
   
    /** 
     * Creates the link of Geocoding Api
     */
    private String createGeocodingAPILink(String cityName)
    {
        String link = GeocodingAPILink;
        link += "q="+cityName+",US"; //only US cities
        link += "&limit=1";
        link += "&appid=" + apikey;
        return link;
    }
   
    /** 
     * Creates the link of HsitoricalWeather Api
     */
    private String createHistoricalWeatherAPILink(Coord coords, Date start)
    {
        Calendar UTCDate = Calendar.getInstance();
        UTCDate.setTime(start);
        String link = HistoricalWeatherAPILink;
        link += coords.toString();
        link += "&dt=" + (UTCDate.getTimeInMillis()/1000);
        link += "&appid=" + apikey;
        link += "&units=imperial";
        return link;
    }   
}
